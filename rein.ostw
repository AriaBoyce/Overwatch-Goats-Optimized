import "base.ostw";
playervar define rein_goal_shield;
playervar define rein_live_shield;
playervar define rein_ult_damage = false;

playervar define hp_scalar = 100;

playervar define rein_fire_strike_scalar = ((200/240)*100);
void rein_setup()
{
    //SetDamageDealt(EventPlayer(),25); done in custom game settings but listed here as well
    //shield health 2000
    //shield regen 200 up from 144
    //CreateHudText(EventPlayer(),null,null,"{0}\n{1}".Format([IsButtonHeld(EventPlayer(),Button.SecondaryFire),IsFiringSecondary()]),Location.Left,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleNever);
    rein_goal_shield = WorkshopSettingReal("Rein","Rein Shield Health Goal",2000,0,2500,0);
    rein_live_shield = WorkshopSettingReal("Rein","Rein Shield Health Live",1500,0,2500,0);
    SetMaxHealth(EventPlayer(),(rein_goal_shield/rein_live_shield)*100);
    SetKnockbackReceived(EventPlayer(),166);
    //armor 200
    //health 300
    base_armor = 200;
    base_shield = 0;
    base_health = 300;
    self_move_speed = 100;

    //hammer damage 75

    //fire strike 1
    //fire strike damage 100
    
    //charge 300 damage
    //cooldown 10

    //earthshatter 50 damage flat

    //no tank passive
    role = 1;
    current_hero = Hero.Reinhardt;
    AddHealthPoolToPlayer(EventPlayer(),HealthType.Health,266.67,true,true);
    //CreateHudText(EventPlayer(),"{0}\n{1}\n{2}".Format([IsButtonHeld(EventPlayer(),Button.Ultimate),UltimateChargePercent(EventPlayer()),ServerLoadPeak()]),null,null,Location.Left,0,Color.White,Color.White,Color.White,HudTextRev.String,Spectators.VisibleAlways);
}

rule: "Rein Action"
Event.OngoingPlayer
Player.Reinhardt
{
    if (IsUsingAbility2())
    {
        //fire strike
        SetAbilityCharge(EventPlayer(),Button.Ability2,0);
        SetDamageDealt(EventPlayer(),rein_fire_strike_scalar);
        WaitUntil(IsUsingAbility2() == false,10);
        SetAbilityCooldown(EventPlayer(),Button.Ability2,6);
    }
    else if(IsFiringSecondary())
    {
        //shield
        self_move_speed -= 28;
        SetMoveSpeed(EventPlayer(),self_move_speed);
        WaitUntil(!IsFiringSecondary(),1000);
        self_move_speed += 28;
        SetMoveSpeed(EventPlayer(),self_move_speed);
    }
    else if(IsFiringPrimary())
    {
        SetDamageDealt(EventPlayer(),70);
    }
    else if(IsUsingAbility1())
    {
        SetDamageDealt(EventPlayer(),100);
    }
    else if(!IsUsingUltimate())
    {
        rein_ult_damage = false;
    }


    Wait(1/3);
    LoopIf(HeroOf(EventPlayer()) == Hero.Reinhardt);
}
rule: "Rein Ult Check"
Event.OngoingPlayer
Player.Reinhardt
if(IsButtonHeld(EventPlayer(),Button.Ultimate))
if(rein_ult_damage == false)
{
    SetDamageDealt(EventPlayer(),25);
    rein_ult_damage = true;
}
